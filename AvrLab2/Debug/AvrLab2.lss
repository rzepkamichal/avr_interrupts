
AvrLab2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800200  00800200  000003ce  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000035a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000102  00800200  00800200  000003ce  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000003ce  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000400  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  00000440  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000d88  00000000  00000000  00000468  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c07  00000000  00000000  000011f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003da  00000000  00000000  00001df7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000048  00000000  00000000  000021d4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000058f  00000000  00000000  0000221c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000140  00000000  00000000  000027ab  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  000028eb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	ea c0       	rjmp	.+468    	; 0x1d6 <__ctors_end>
   2:	00 00       	nop
   4:	fa c0       	rjmp	.+500    	; 0x1fa <__bad_interrupt>
   6:	00 00       	nop
   8:	f8 c0       	rjmp	.+496    	; 0x1fa <__bad_interrupt>
   a:	00 00       	nop
   c:	f6 c0       	rjmp	.+492    	; 0x1fa <__bad_interrupt>
   e:	00 00       	nop
  10:	f4 c0       	rjmp	.+488    	; 0x1fa <__bad_interrupt>
  12:	00 00       	nop
  14:	f2 c0       	rjmp	.+484    	; 0x1fa <__bad_interrupt>
  16:	00 00       	nop
  18:	f0 c0       	rjmp	.+480    	; 0x1fa <__bad_interrupt>
  1a:	00 00       	nop
  1c:	ee c0       	rjmp	.+476    	; 0x1fa <__bad_interrupt>
  1e:	00 00       	nop
  20:	ec c0       	rjmp	.+472    	; 0x1fa <__bad_interrupt>
  22:	00 00       	nop
  24:	ea c0       	rjmp	.+468    	; 0x1fa <__bad_interrupt>
  26:	00 00       	nop
  28:	e8 c0       	rjmp	.+464    	; 0x1fa <__bad_interrupt>
  2a:	00 00       	nop
  2c:	e6 c0       	rjmp	.+460    	; 0x1fa <__bad_interrupt>
  2e:	00 00       	nop
  30:	e4 c0       	rjmp	.+456    	; 0x1fa <__bad_interrupt>
  32:	00 00       	nop
  34:	e2 c0       	rjmp	.+452    	; 0x1fa <__bad_interrupt>
  36:	00 00       	nop
  38:	e0 c0       	rjmp	.+448    	; 0x1fa <__bad_interrupt>
  3a:	00 00       	nop
  3c:	de c0       	rjmp	.+444    	; 0x1fa <__bad_interrupt>
  3e:	00 00       	nop
  40:	dc c0       	rjmp	.+440    	; 0x1fa <__bad_interrupt>
  42:	00 00       	nop
  44:	da c0       	rjmp	.+436    	; 0x1fa <__bad_interrupt>
  46:	00 00       	nop
  48:	d8 c0       	rjmp	.+432    	; 0x1fa <__bad_interrupt>
  4a:	00 00       	nop
  4c:	d6 c0       	rjmp	.+428    	; 0x1fa <__bad_interrupt>
  4e:	00 00       	nop
  50:	d5 c0       	rjmp	.+426    	; 0x1fc <__vector_20>
  52:	00 00       	nop
  54:	d2 c0       	rjmp	.+420    	; 0x1fa <__bad_interrupt>
  56:	00 00       	nop
  58:	d0 c0       	rjmp	.+416    	; 0x1fa <__bad_interrupt>
  5a:	00 00       	nop
  5c:	ce c0       	rjmp	.+412    	; 0x1fa <__bad_interrupt>
  5e:	00 00       	nop
  60:	cc c0       	rjmp	.+408    	; 0x1fa <__bad_interrupt>
  62:	00 00       	nop
  64:	ca c0       	rjmp	.+404    	; 0x1fa <__bad_interrupt>
  66:	00 00       	nop
  68:	c8 c0       	rjmp	.+400    	; 0x1fa <__bad_interrupt>
  6a:	00 00       	nop
  6c:	c6 c0       	rjmp	.+396    	; 0x1fa <__bad_interrupt>
  6e:	00 00       	nop
  70:	c4 c0       	rjmp	.+392    	; 0x1fa <__bad_interrupt>
  72:	00 00       	nop
  74:	c2 c0       	rjmp	.+388    	; 0x1fa <__bad_interrupt>
  76:	00 00       	nop
  78:	c0 c0       	rjmp	.+384    	; 0x1fa <__bad_interrupt>
  7a:	00 00       	nop
  7c:	be c0       	rjmp	.+380    	; 0x1fa <__bad_interrupt>
  7e:	00 00       	nop
  80:	bc c0       	rjmp	.+376    	; 0x1fa <__bad_interrupt>
  82:	00 00       	nop
  84:	ba c0       	rjmp	.+372    	; 0x1fa <__bad_interrupt>
  86:	00 00       	nop
  88:	b8 c0       	rjmp	.+368    	; 0x1fa <__bad_interrupt>
  8a:	00 00       	nop
  8c:	b6 c0       	rjmp	.+364    	; 0x1fa <__bad_interrupt>
  8e:	00 00       	nop
  90:	b4 c0       	rjmp	.+360    	; 0x1fa <__bad_interrupt>
  92:	00 00       	nop
  94:	b2 c0       	rjmp	.+356    	; 0x1fa <__bad_interrupt>
  96:	00 00       	nop
  98:	b0 c0       	rjmp	.+352    	; 0x1fa <__bad_interrupt>
  9a:	00 00       	nop
  9c:	ae c0       	rjmp	.+348    	; 0x1fa <__bad_interrupt>
  9e:	00 00       	nop
  a0:	ac c0       	rjmp	.+344    	; 0x1fa <__bad_interrupt>
  a2:	00 00       	nop
  a4:	aa c0       	rjmp	.+340    	; 0x1fa <__bad_interrupt>
  a6:	00 00       	nop
  a8:	a8 c0       	rjmp	.+336    	; 0x1fa <__bad_interrupt>
  aa:	00 00       	nop
  ac:	a6 c0       	rjmp	.+332    	; 0x1fa <__bad_interrupt>
  ae:	00 00       	nop
  b0:	a4 c0       	rjmp	.+328    	; 0x1fa <__bad_interrupt>
  b2:	00 00       	nop
  b4:	a2 c0       	rjmp	.+324    	; 0x1fa <__bad_interrupt>
  b6:	00 00       	nop
  b8:	a0 c0       	rjmp	.+320    	; 0x1fa <__bad_interrupt>
  ba:	00 00       	nop
  bc:	9e c0       	rjmp	.+316    	; 0x1fa <__bad_interrupt>
  be:	00 00       	nop
  c0:	9c c0       	rjmp	.+312    	; 0x1fa <__bad_interrupt>
  c2:	00 00       	nop
  c4:	9a c0       	rjmp	.+308    	; 0x1fa <__bad_interrupt>
  c6:	00 00       	nop
  c8:	98 c0       	rjmp	.+304    	; 0x1fa <__bad_interrupt>
  ca:	00 00       	nop
  cc:	96 c0       	rjmp	.+300    	; 0x1fa <__bad_interrupt>
  ce:	00 00       	nop
  d0:	94 c0       	rjmp	.+296    	; 0x1fa <__bad_interrupt>
  d2:	00 00       	nop
  d4:	92 c0       	rjmp	.+292    	; 0x1fa <__bad_interrupt>
  d6:	00 00       	nop
  d8:	90 c0       	rjmp	.+288    	; 0x1fa <__bad_interrupt>
  da:	00 00       	nop
  dc:	8e c0       	rjmp	.+284    	; 0x1fa <__bad_interrupt>
  de:	00 00       	nop
  e0:	8c c0       	rjmp	.+280    	; 0x1fa <__bad_interrupt>
	...

000000e4 <TAB_ROM>:
  e4:	00 01 02 03 04 05 06 07 08 09 0a 0b 0c 0d 0e 1f     ................
  f4:	10 11 12 13 14 15 16 17 18 19 1a 1b 1c 1d 1f 1f     ................
 104:	20 21 22 23 24 25 26 27 28 29 2a 2b 2c 2d 2e 2f      !"#$%&'()*+,-./
 114:	30 31 32 33 34 35 36 37 38 39 3a 3b 3c 3d 3e 3f     0123456789:;<=>?
 124:	40 41 42 43 44 45 46 47 48 49 4a 4b 4c 4d 4e 4f     @ABCDEFGHIJKLMNO
 134:	50 51 52 53 54 55 56 57 58 59 5a 5b 5c 5d 5e 5f     PQRSTUVWXYZ[\]^_
 144:	60 61 62 63 64 65 66 67 68 69 6a 6b 6c 6d 6e 6f     `abcdefghijklmno
 154:	70 71 72 73 74 75 76 77 78 79 7a 7b 7c 7d 7e 7f     pqrstuvwxyz{|}~.
 164:	80 81 82 83 84 85 86 87 88 89 8a 8b 8c 8d 8e 8f     ................
 174:	90 91 92 93 94 95 96 97 98 99 9a 9b 9c 9d 9e 9f     ................
 184:	a0 a1 a2 a3 a4 a5 a6 a7 a8 a9 aa ab ac ad ae af     ................
 194:	b0 b1 b2 b3 b4 b5 b6 b7 b8 b9 ba bb bc bd be bf     ................
 1a4:	c0 c1 c2 c3 c4 c5 c6 c7 c8 c9 ca cb cc cd ce cf     ................
 1b4:	e0 e1 e2 e3 e4 e5 e6 e7 e8 e9 ea eb ec ed ee ef     ................
 1c4:	ff fe fd fc fb fa f9 f8 f7 f6 f5 f4 f3 f2 f1 f0     ................
	...

000001d6 <__ctors_end>:
 1d6:	11 24       	eor	r1, r1
 1d8:	1f be       	out	0x3f, r1	; 63
 1da:	cf ef       	ldi	r28, 0xFF	; 255
 1dc:	d1 e2       	ldi	r29, 0x21	; 33
 1de:	de bf       	out	0x3e, r29	; 62
 1e0:	cd bf       	out	0x3d, r28	; 61
 1e2:	00 e0       	ldi	r16, 0x00	; 0
 1e4:	0c bf       	out	0x3c, r16	; 60

000001e6 <__do_clear_bss>:
 1e6:	23 e0       	ldi	r18, 0x03	; 3
 1e8:	a0 e0       	ldi	r26, 0x00	; 0
 1ea:	b2 e0       	ldi	r27, 0x02	; 2
 1ec:	01 c0       	rjmp	.+2      	; 0x1f0 <.do_clear_bss_start>

000001ee <.do_clear_bss_loop>:
 1ee:	1d 92       	st	X+, r1

000001f0 <.do_clear_bss_start>:
 1f0:	a2 30       	cpi	r26, 0x02	; 2
 1f2:	b2 07       	cpc	r27, r18
 1f4:	e1 f7       	brne	.-8      	; 0x1ee <.do_clear_bss_loop>
 1f6:	2c d0       	rcall	.+88     	; 0x250 <main>
 1f8:	ae c0       	rjmp	.+348    	; 0x356 <_exit>

000001fa <__bad_interrupt>:
 1fa:	02 cf       	rjmp	.-508    	; 0x0 <__vectors>

000001fc <__vector_20>:
//indicates the number of timer interrupts the main program should wait after certain events
//volatile - to access the variable from timer overflow function and from main function
volatile int overflowCounter;

//handles timer1 overflow interrupt
ISR(TIMER1_OVF_vect){
 1fc:	1f 92       	push	r1
 1fe:	0f 92       	push	r0
 200:	0f b6       	in	r0, 0x3f	; 63
 202:	0f 92       	push	r0
 204:	11 24       	eor	r1, r1
 206:	8f 93       	push	r24
 208:	9f 93       	push	r25
	
	overflowCounter--;
 20a:	80 91 00 03 	lds	r24, 0x0300	; 0x800300 <overflowCounter>
 20e:	90 91 01 03 	lds	r25, 0x0301	; 0x800301 <overflowCounter+0x1>
 212:	01 97       	sbiw	r24, 0x01	; 1
 214:	90 93 01 03 	sts	0x0301, r25	; 0x800301 <overflowCounter+0x1>
 218:	80 93 00 03 	sts	0x0300, r24	; 0x800300 <overflowCounter>
	
	//blink LED's on PORTC when the timer hits the preset amount of overflows
	if(overflowCounter == 0){
 21c:	80 91 00 03 	lds	r24, 0x0300	; 0x800300 <overflowCounter>
 220:	90 91 01 03 	lds	r25, 0x0301	; 0x800301 <overflowCounter+0x1>
 224:	89 2b       	or	r24, r25
 226:	39 f4       	brne	.+14     	; 0x236 <__vector_20+0x3a>
		
		if(PORTC != 0x00)
 228:	88 b1       	in	r24, 0x08	; 8
 22a:	88 23       	and	r24, r24
 22c:	11 f0       	breq	.+4      	; 0x232 <__vector_20+0x36>
			PORTC = 0x00;
 22e:	18 b8       	out	0x08, r1	; 8
 230:	02 c0       	rjmp	.+4      	; 0x236 <__vector_20+0x3a>
		else
			PORTC = 0xFF;
 232:	8f ef       	ldi	r24, 0xFF	; 255
 234:	88 b9       	out	0x08, r24	; 8
	}
	
	//reset the timer register value
	TCNT1 = timer_200_ms;
 236:	8a ec       	ldi	r24, 0xCA	; 202
 238:	93 ef       	ldi	r25, 0xF3	; 243
 23a:	90 93 85 00 	sts	0x0085, r25	; 0x800085 <__TEXT_REGION_LENGTH__+0x700085>
 23e:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <__TEXT_REGION_LENGTH__+0x700084>
}
 242:	9f 91       	pop	r25
 244:	8f 91       	pop	r24
 246:	0f 90       	pop	r0
 248:	0f be       	out	0x3f, r0	; 63
 24a:	0f 90       	pop	r0
 24c:	1f 90       	pop	r1
 24e:	18 95       	reti

00000250 <main>:
	//    port A as input and switching Pull-up resistors on
	//DDRA=0x00;
	//PORTA=0xFF;
	//    port C as output and initial value FF
	
	DDRA = 0x00;
 250:	11 b8       	out	0x01, r1	; 1
	
	//turn on internal pull-ups if none external are present
	if(PINA != 0xFF){
 252:	80 b1       	in	r24, 0x00	; 0
 254:	8f 3f       	cpi	r24, 0xFF	; 255
 256:	11 f0       	breq	.+4      	; 0x25c <main+0xc>
		PORTA = 0xFF;
 258:	8f ef       	ldi	r24, 0xFF	; 255
 25a:	82 b9       	out	0x02, r24	; 2
	}
	
	DDRB=0xFF;
 25c:	8f ef       	ldi	r24, 0xFF	; 255
 25e:	84 b9       	out	0x04, r24	; 4
	PORTB=0x00;
 260:	15 b8       	out	0x05, r1	; 5
	
	DDRC=0xFF;
 262:	87 b9       	out	0x07, r24	; 7
	PORTC=0xFF;
 264:	88 b9       	out	0x08, r24	; 8
	// Writing a logic one to PINxn toggles the value of PORTxn, independent on the value of DDRxn
	// Note that the SBI instruction can be used to toggle one single bit in a port.


	// 2. Enable interrupts if needed
	TCCR1A = 0x00;
 266:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
	TCCR1B = (1<<CS10) | (1<<CS12);	// set timer1 prescaler to 1024
 26a:	85 e0       	ldi	r24, 0x05	; 5
 26c:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x700081>
	TIMSK1 = (1 << TOIE1);			// enable timer1 overflow interrupt
 270:	81 e0       	ldi	r24, 0x01	; 1
 272:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x70006f>
	
	//disable global interrupts
	cli();
 276:	f8 94       	cli

	// 3. Place here main code
	
	int iROM = 0;
	int iRAM = 0;
 278:	20 e0       	ldi	r18, 0x00	; 0
 27a:	30 e0       	ldi	r19, 0x00	; 0
	//disable global interrupts
	cli();

	// 3. Place here main code
	
	int iROM = 0;
 27c:	40 e0       	ldi	r20, 0x00	; 0
 27e:	50 e0       	ldi	r21, 0x00	; 0
			} else {
				
				iRAM = 0;
				
				//wait for 1000 ms
				overflowCounter = 5;
 280:	05 e0       	ldi	r16, 0x05	; 5
 282:	10 e0       	ldi	r17, 0x00	; 0
				TCNT1 = timer_200_ms;
 284:	c4 e8       	ldi	r28, 0x84	; 132
 286:	d0 e0       	ldi	r29, 0x00	; 0
 288:	6a ec       	ldi	r22, 0xCA	; 202
 28a:	73 ef       	ldi	r23, 0xF3	; 243
				TAB_RAM[iRAM] = pgm_read_byte_far(pgm_get_far_address (TAB_ROM) + iROM);
				iROM++;
				iRAM++;
				
				//wait for 200ms
				overflowCounter = 1;
 28c:	ee 24       	eor	r14, r14
 28e:	e3 94       	inc	r14
 290:	f1 2c       	mov	r15, r1
	int iROM = 0;
	int iRAM = 0;
	
	while(1)
	{
		if(PINA != 0xFF) {
 292:	80 b1       	in	r24, 0x00	; 0
 294:	8f 3f       	cpi	r24, 0xFF	; 255
 296:	e9 f3       	breq	.-6      	; 0x292 <main+0x42>
			
			if (iRAM < nLength) {
 298:	2f 3f       	cpi	r18, 0xFF	; 255
 29a:	31 05       	cpc	r19, r1
 29c:	11 f0       	breq	.+4      	; 0x2a2 <main+0x52>
 29e:	0c f0       	brlt	.+2      	; 0x2a2 <main+0x52>
 2a0:	48 c0       	rjmp	.+144    	; 0x332 <main+0xe2>
				
				if (0x0000 == pgm_read_word_far(pgm_get_far_address(TAB_ROM) + iROM)) {
 2a2:	84 ee       	ldi	r24, 0xE4	; 228
 2a4:	90 e0       	ldi	r25, 0x00	; 0
 2a6:	a0 e0       	ldi	r26, 0x00	; 0
 2a8:	bb 27       	eor	r27, r27
 2aa:	4a 01       	movw	r8, r20
 2ac:	05 2e       	mov	r0, r21
 2ae:	00 0c       	add	r0, r0
 2b0:	aa 08       	sbc	r10, r10
 2b2:	bb 08       	sbc	r11, r11
 2b4:	88 0d       	add	r24, r8
 2b6:	99 1d       	adc	r25, r9
 2b8:	aa 1d       	adc	r26, r10
 2ba:	bb 1d       	adc	r27, r11
 2bc:	ab bf       	out	0x3b, r26	; 59
 2be:	fc 01       	movw	r30, r24
 2c0:	87 91       	elpm	r24, Z+
 2c2:	96 91       	elpm	r25, Z
 2c4:	89 2b       	or	r24, r25
 2c6:	91 f4       	brne	.+36     	; 0x2ec <main+0x9c>
					
					iROM = 0;
				
					//wait for 1000 ms
					overflowCounter = 5;
 2c8:	10 93 01 03 	sts	0x0301, r17	; 0x800301 <overflowCounter+0x1>
 2cc:	00 93 00 03 	sts	0x0300, r16	; 0x800300 <overflowCounter>
					TCNT1 = timer_200_ms;
 2d0:	79 83       	std	Y+1, r23	; 0x01
 2d2:	68 83       	st	Y, r22
					sei();
 2d4:	78 94       	sei
					while(overflowCounter > 0){}
 2d6:	80 91 00 03 	lds	r24, 0x0300	; 0x800300 <overflowCounter>
 2da:	90 91 01 03 	lds	r25, 0x0301	; 0x800301 <overflowCounter+0x1>
 2de:	18 16       	cp	r1, r24
 2e0:	19 06       	cpc	r1, r25
 2e2:	cc f3       	brlt	.-14     	; 0x2d6 <main+0x86>
					cli();
 2e4:	f8 94       	cli
			
			if (iRAM < nLength) {
				
				if (0x0000 == pgm_read_word_far(pgm_get_far_address(TAB_ROM) + iROM)) {
					
					iROM = 0;
 2e6:	40 e0       	ldi	r20, 0x00	; 0
 2e8:	50 e0       	ldi	r21, 0x00	; 0
					overflowCounter = 5;
					TCNT1 = timer_200_ms;
					sei();
					while(overflowCounter > 0){}
					cli();
					continue;
 2ea:	d3 cf       	rjmp	.-90     	; 0x292 <main+0x42>
				}
				
				TAB_RAM[iRAM] = pgm_read_byte_far(pgm_get_far_address (TAB_ROM) + iROM);
 2ec:	84 ee       	ldi	r24, 0xE4	; 228
 2ee:	90 e0       	ldi	r25, 0x00	; 0
 2f0:	a0 e0       	ldi	r26, 0x00	; 0
 2f2:	bb 27       	eor	r27, r27
 2f4:	88 0d       	add	r24, r8
 2f6:	99 1d       	adc	r25, r9
 2f8:	aa 1d       	adc	r26, r10
 2fa:	bb 1d       	adc	r27, r11
 2fc:	ab bf       	out	0x3b, r26	; 59
 2fe:	fc 01       	movw	r30, r24
 300:	87 91       	elpm	r24, Z+
 302:	f9 01       	movw	r30, r18
 304:	e0 50       	subi	r30, 0x00	; 0
 306:	fe 4f       	sbci	r31, 0xFE	; 254
 308:	80 83       	st	Z, r24
				iROM++;
 30a:	4f 5f       	subi	r20, 0xFF	; 255
 30c:	5f 4f       	sbci	r21, 0xFF	; 255
				iRAM++;
 30e:	2f 5f       	subi	r18, 0xFF	; 255
 310:	3f 4f       	sbci	r19, 0xFF	; 255
				
				//wait for 200ms
				overflowCounter = 1;
 312:	f0 92 01 03 	sts	0x0301, r15	; 0x800301 <overflowCounter+0x1>
 316:	e0 92 00 03 	sts	0x0300, r14	; 0x800300 <overflowCounter>
				TCNT1 = timer_200_ms;
 31a:	79 83       	std	Y+1, r23	; 0x01
 31c:	68 83       	st	Y, r22
				sei();
 31e:	78 94       	sei
				while(overflowCounter > 0){}
 320:	80 91 00 03 	lds	r24, 0x0300	; 0x800300 <overflowCounter>
 324:	90 91 01 03 	lds	r25, 0x0301	; 0x800301 <overflowCounter+0x1>
 328:	18 16       	cp	r1, r24
 32a:	19 06       	cpc	r1, r25
 32c:	cc f3       	brlt	.-14     	; 0x320 <main+0xd0>
				cli();
 32e:	f8 94       	cli
 330:	b0 cf       	rjmp	.-160    	; 0x292 <main+0x42>
			} else {
				
				iRAM = 0;
				
				//wait for 1000 ms
				overflowCounter = 5;
 332:	10 93 01 03 	sts	0x0301, r17	; 0x800301 <overflowCounter+0x1>
 336:	00 93 00 03 	sts	0x0300, r16	; 0x800300 <overflowCounter>
				TCNT1 = timer_200_ms;
 33a:	79 83       	std	Y+1, r23	; 0x01
 33c:	68 83       	st	Y, r22
				sei();
 33e:	78 94       	sei
				while(overflowCounter > 0){}
 340:	80 91 00 03 	lds	r24, 0x0300	; 0x800300 <overflowCounter>
 344:	90 91 01 03 	lds	r25, 0x0301	; 0x800301 <overflowCounter+0x1>
 348:	18 16       	cp	r1, r24
 34a:	19 06       	cpc	r1, r25
 34c:	cc f3       	brlt	.-14     	; 0x340 <main+0xf0>
				cli();
 34e:	f8 94       	cli
				while(overflowCounter > 0){}
				cli();
				
			} else {
				
				iRAM = 0;
 350:	20 e0       	ldi	r18, 0x00	; 0
 352:	30 e0       	ldi	r19, 0x00	; 0
 354:	9e cf       	rjmp	.-196    	; 0x292 <main+0x42>

00000356 <_exit>:
 356:	f8 94       	cli

00000358 <__stop_program>:
 358:	ff cf       	rjmp	.-2      	; 0x358 <__stop_program>
