
AvrLab2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000336  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002c2  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000102  00800100  00800100  00000336  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000336  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000368  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  000003a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000007c0  00000000  00000000  000003d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000673  00000000  00000000  00000b90  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000030e  00000000  00000000  00001203  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000048  00000000  00000000  00001514  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003b2  00000000  00000000  0000155c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000124  00000000  00000000  0000190e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  00001a32  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 ad 00 	jmp	0x15a	; 0x15a <__ctors_end>
   4:	0c 94 bf 00 	jmp	0x17e	; 0x17e <__bad_interrupt>
   8:	0c 94 bf 00 	jmp	0x17e	; 0x17e <__bad_interrupt>
   c:	0c 94 bf 00 	jmp	0x17e	; 0x17e <__bad_interrupt>
  10:	0c 94 bf 00 	jmp	0x17e	; 0x17e <__bad_interrupt>
  14:	0c 94 bf 00 	jmp	0x17e	; 0x17e <__bad_interrupt>
  18:	0c 94 bf 00 	jmp	0x17e	; 0x17e <__bad_interrupt>
  1c:	0c 94 bf 00 	jmp	0x17e	; 0x17e <__bad_interrupt>
  20:	0c 94 bf 00 	jmp	0x17e	; 0x17e <__bad_interrupt>
  24:	0c 94 bf 00 	jmp	0x17e	; 0x17e <__bad_interrupt>
  28:	0c 94 bf 00 	jmp	0x17e	; 0x17e <__bad_interrupt>
  2c:	0c 94 bf 00 	jmp	0x17e	; 0x17e <__bad_interrupt>
  30:	0c 94 bf 00 	jmp	0x17e	; 0x17e <__bad_interrupt>
  34:	0c 94 c1 00 	jmp	0x182	; 0x182 <__vector_13>
  38:	0c 94 bf 00 	jmp	0x17e	; 0x17e <__bad_interrupt>
  3c:	0c 94 bf 00 	jmp	0x17e	; 0x17e <__bad_interrupt>
  40:	0c 94 bf 00 	jmp	0x17e	; 0x17e <__bad_interrupt>
  44:	0c 94 bf 00 	jmp	0x17e	; 0x17e <__bad_interrupt>
  48:	0c 94 bf 00 	jmp	0x17e	; 0x17e <__bad_interrupt>
  4c:	0c 94 bf 00 	jmp	0x17e	; 0x17e <__bad_interrupt>
  50:	0c 94 bf 00 	jmp	0x17e	; 0x17e <__bad_interrupt>
  54:	0c 94 bf 00 	jmp	0x17e	; 0x17e <__bad_interrupt>
  58:	0c 94 bf 00 	jmp	0x17e	; 0x17e <__bad_interrupt>
  5c:	0c 94 bf 00 	jmp	0x17e	; 0x17e <__bad_interrupt>
  60:	0c 94 bf 00 	jmp	0x17e	; 0x17e <__bad_interrupt>
  64:	0c 94 bf 00 	jmp	0x17e	; 0x17e <__bad_interrupt>

00000068 <TAB_ROM>:
  68:	00 01 02 03 04 05 06 07 08 09 0a 0b 0c 0d 0e 1f     ................
  78:	10 11 12 13 14 15 16 17 18 19 1a 1b 1c 1d 1f 1f     ................
  88:	20 21 22 23 24 25 26 27 28 29 2a 2b 2c 2d 2e 2f      !"#$%&'()*+,-./
  98:	30 31 32 33 34 35 36 37 38 39 3a 3b 3c 3d 3e 3f     0123456789:;<=>?
  a8:	40 41 42 43 44 45 46 47 48 49 4a 4b 4c 4d 4e 4f     @ABCDEFGHIJKLMNO
  b8:	50 51 52 53 54 55 56 57 58 59 5a 5b 5c 5d 5e 5f     PQRSTUVWXYZ[\]^_
  c8:	60 61 62 63 64 65 66 67 68 69 6a 6b 6c 6d 6e 6f     `abcdefghijklmno
  d8:	70 71 72 73 74 75 76 77 78 79 7a 7b 7c 7d 7e 7f     pqrstuvwxyz{|}~.
  e8:	80 81 82 83 84 85 86 87 88 89 8a 8b 8c 8d 8e 8f     ................
  f8:	90 91 92 93 94 95 96 97 98 99 9a 9b 9c 9d 9e 9f     ................
 108:	a0 a1 a2 a3 a4 a5 a6 a7 a8 a9 aa ab ac ad ae af     ................
 118:	b0 b1 b2 b3 b4 b5 b6 b7 b8 b9 ba bb bc bd be bf     ................
 128:	c0 c1 c2 c3 c4 c5 c6 c7 c8 c9 ca cb cc cd ce cf     ................
 138:	e0 e1 e2 e3 e4 e5 e6 e7 e8 e9 ea eb ec ed ee ef     ................
 148:	ff fe fd fc fb fa f9 f8 f7 f6 f5 f4 f3 f2 f1 f0     ................
	...

0000015a <__ctors_end>:
 15a:	11 24       	eor	r1, r1
 15c:	1f be       	out	0x3f, r1	; 63
 15e:	cf ef       	ldi	r28, 0xFF	; 255
 160:	d8 e0       	ldi	r29, 0x08	; 8
 162:	de bf       	out	0x3e, r29	; 62
 164:	cd bf       	out	0x3d, r28	; 61

00000166 <__do_clear_bss>:
 166:	22 e0       	ldi	r18, 0x02	; 2
 168:	a0 e0       	ldi	r26, 0x00	; 0
 16a:	b1 e0       	ldi	r27, 0x01	; 1
 16c:	01 c0       	rjmp	.+2      	; 0x170 <.do_clear_bss_start>

0000016e <.do_clear_bss_loop>:
 16e:	1d 92       	st	X+, r1

00000170 <.do_clear_bss_start>:
 170:	a2 30       	cpi	r26, 0x02	; 2
 172:	b2 07       	cpc	r27, r18
 174:	e1 f7       	brne	.-8      	; 0x16e <.do_clear_bss_loop>
 176:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <main>
 17a:	0c 94 5f 01 	jmp	0x2be	; 0x2be <_exit>

0000017e <__bad_interrupt>:
 17e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000182 <__vector_13>:
//indicates the number of timer interrupts the main program should wait after certain events
//volatile - to access the variable from timer overflow function and from main function
volatile int overflowCounter;

//handles timer1 overflow interrupt
ISR(TIMER1_OVF_vect){
 182:	1f 92       	push	r1
 184:	0f 92       	push	r0
 186:	0f b6       	in	r0, 0x3f	; 63
 188:	0f 92       	push	r0
 18a:	11 24       	eor	r1, r1
 18c:	8f 93       	push	r24
 18e:	9f 93       	push	r25
	
	overflowCounter--;
 190:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <overflowCounter>
 194:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <overflowCounter+0x1>
 198:	01 97       	sbiw	r24, 0x01	; 1
 19a:	90 93 01 02 	sts	0x0201, r25	; 0x800201 <overflowCounter+0x1>
 19e:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <overflowCounter>
	
	//blink LED's on PORTC when the timer hits the preset amount of overflows
	// !!! CHANGE TO PORTC in lab
	if(overflowCounter == 0){
 1a2:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <overflowCounter>
 1a6:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <overflowCounter+0x1>
 1aa:	89 2b       	or	r24, r25
 1ac:	39 f4       	brne	.+14     	; 0x1bc <__vector_13+0x3a>
		
		if(PORTD != 0x00)
 1ae:	8b b1       	in	r24, 0x0b	; 11
 1b0:	88 23       	and	r24, r24
 1b2:	11 f0       	breq	.+4      	; 0x1b8 <__vector_13+0x36>
			PORTD = 0x00;
 1b4:	1b b8       	out	0x0b, r1	; 11
 1b6:	02 c0       	rjmp	.+4      	; 0x1bc <__vector_13+0x3a>
		else
			PORTD = 0xFF;
 1b8:	8f ef       	ldi	r24, 0xFF	; 255
 1ba:	8b b9       	out	0x0b, r24	; 11
	}
	
	//reset the timer register value
	TCNT1 = timer_200_ms;
 1bc:	8a ec       	ldi	r24, 0xCA	; 202
 1be:	93 ef       	ldi	r25, 0xF3	; 243
 1c0:	90 93 85 00 	sts	0x0085, r25	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
 1c4:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
}
 1c8:	9f 91       	pop	r25
 1ca:	8f 91       	pop	r24
 1cc:	0f 90       	pop	r0
 1ce:	0f be       	out	0x3f, r0	; 63
 1d0:	0f 90       	pop	r0
 1d2:	1f 90       	pop	r1
 1d4:	18 95       	reti

000001d6 <main>:
	// for instance:
	//    port A as input and switching Pull-up resistors on
	//DDRA=0x00;
	//PORTA=0xFF;
	//    port C as output and initial value FF
	DDRB=0xFF;
 1d6:	8f ef       	ldi	r24, 0xFF	; 255
 1d8:	84 b9       	out	0x04, r24	; 4
	PORTB=0x00;
 1da:	15 b8       	out	0x05, r1	; 5
	
	DDRC=0xFF;
 1dc:	87 b9       	out	0x07, r24	; 7
	PORTC=0xFF;
 1de:	88 b9       	out	0x08, r24	; 8
	
	DDRD = 0xFF;
 1e0:	8a b9       	out	0x0a, r24	; 10
	PORTD = 0xFF;
 1e2:	8b b9       	out	0x0b, r24	; 11
	// Writing a logic one to PINxn toggles the value of PORTxn, independent on the value of DDRxn
	// Note that the SBI instruction can be used to toggle one single bit in a port.


	// 2. Enable interrupts if needed
	TCCR1A = 0x00;
 1e4:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
	TCCR1B = (1<<CS10) | (1<<CS12);	// set timer1 prescaler to 1024
 1e8:	85 e0       	ldi	r24, 0x05	; 5
 1ea:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
	TIMSK1 = (1 << TOIE1);			// enable timer1 overflow interrupt
 1ee:	81 e0       	ldi	r24, 0x01	; 1
 1f0:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__DATA_REGION_ORIGIN__+0xf>
	
	//disable global interrupts
	cli();
 1f4:	f8 94       	cli

	// 3. Place here main code
	
	int iROM = 0;
	int iRAM = 0;
 1f6:	20 e0       	ldi	r18, 0x00	; 0
 1f8:	30 e0       	ldi	r19, 0x00	; 0
	//disable global interrupts
	cli();

	// 3. Place here main code
	
	int iROM = 0;
 1fa:	40 e0       	ldi	r20, 0x00	; 0
 1fc:	50 e0       	ldi	r21, 0x00	; 0
			} else {
				
				iRAM = 0;
				
				//wait for 1000 ms
				overflowCounter = 5;
 1fe:	05 e0       	ldi	r16, 0x05	; 5
 200:	10 e0       	ldi	r17, 0x00	; 0
				TCNT1 = timer_200_ms;
 202:	c4 e8       	ldi	r28, 0x84	; 132
 204:	d0 e0       	ldi	r29, 0x00	; 0
 206:	6a ec       	ldi	r22, 0xCA	; 202
 208:	73 ef       	ldi	r23, 0xF3	; 243
				TAB_RAM[iRAM] = pgm_read_byte(pgm_get_far_address (TAB_ROM) + iROM);
				iROM++;
				iRAM++;
				
				//wait for 200ms
				overflowCounter = 1;
 20a:	ee 24       	eor	r14, r14
 20c:	e3 94       	inc	r14
 20e:	f1 2c       	mov	r15, r1
	int iROM = 0;
	int iRAM = 0;
	
	while(1)
	{
		if(PORTB != 0xFF) { // !!! CHANGE TO PORT A when in laboratory
 210:	85 b1       	in	r24, 0x05	; 5
 212:	8f 3f       	cpi	r24, 0xFF	; 255
 214:	e9 f3       	breq	.-6      	; 0x210 <main+0x3a>
			
			if (iRAM < nLength) {
 216:	2f 3f       	cpi	r18, 0xFF	; 255
 218:	31 05       	cpc	r19, r1
 21a:	11 f0       	breq	.+4      	; 0x220 <main+0x4a>
 21c:	0c f0       	brlt	.+2      	; 0x220 <main+0x4a>
 21e:	3d c0       	rjmp	.+122    	; 0x29a <main+0xc4>
				
				// !!! CHANGE TO "pgm_read_word_far(pgm_get_far_address(TAB_ROM)" + iROM) when in laboratory
				if (0x0000 == pgm_read_word(pgm_get_far_address(TAB_ROM) + iROM)) {
 220:	88 e6       	ldi	r24, 0x68	; 104
 222:	90 e0       	ldi	r25, 0x00	; 0
 224:	a0 e0       	ldi	r26, 0x00	; 0
 226:	bb 27       	eor	r27, r27
 228:	fa 01       	movw	r30, r20
 22a:	e8 0f       	add	r30, r24
 22c:	f9 1f       	adc	r31, r25
 22e:	85 91       	lpm	r24, Z+
 230:	94 91       	lpm	r25, Z
 232:	89 2b       	or	r24, r25
 234:	91 f4       	brne	.+36     	; 0x25a <main+0x84>
					
					iROM = 0;
				
					//wait for 1000 ms
					overflowCounter = 5;
 236:	10 93 01 02 	sts	0x0201, r17	; 0x800201 <overflowCounter+0x1>
 23a:	00 93 00 02 	sts	0x0200, r16	; 0x800200 <overflowCounter>
					TCNT1 = timer_200_ms;
 23e:	79 83       	std	Y+1, r23	; 0x01
 240:	68 83       	st	Y, r22
					sei();
 242:	78 94       	sei
					while(overflowCounter > 0){}
 244:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <overflowCounter>
 248:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <overflowCounter+0x1>
 24c:	18 16       	cp	r1, r24
 24e:	19 06       	cpc	r1, r25
 250:	cc f3       	brlt	.-14     	; 0x244 <main+0x6e>
					cli();
 252:	f8 94       	cli
			if (iRAM < nLength) {
				
				// !!! CHANGE TO "pgm_read_word_far(pgm_get_far_address(TAB_ROM)" + iROM) when in laboratory
				if (0x0000 == pgm_read_word(pgm_get_far_address(TAB_ROM) + iROM)) {
					
					iROM = 0;
 254:	40 e0       	ldi	r20, 0x00	; 0
 256:	50 e0       	ldi	r21, 0x00	; 0
					overflowCounter = 5;
					TCNT1 = timer_200_ms;
					sei();
					while(overflowCounter > 0){}
					cli();
					continue;
 258:	db cf       	rjmp	.-74     	; 0x210 <main+0x3a>
				}
				
				// !!! CHANGE TO "pgm_read_word_far(pgm_get_far_address(TAB_ROM)" + iROM) when in laboratory
				TAB_RAM[iRAM] = pgm_read_byte(pgm_get_far_address (TAB_ROM) + iROM);
 25a:	88 e6       	ldi	r24, 0x68	; 104
 25c:	90 e0       	ldi	r25, 0x00	; 0
 25e:	a0 e0       	ldi	r26, 0x00	; 0
 260:	bb 27       	eor	r27, r27
 262:	fa 01       	movw	r30, r20
 264:	e8 0f       	add	r30, r24
 266:	f9 1f       	adc	r31, r25
 268:	84 91       	lpm	r24, Z
 26a:	f9 01       	movw	r30, r18
 26c:	e0 50       	subi	r30, 0x00	; 0
 26e:	ff 4f       	sbci	r31, 0xFF	; 255
 270:	80 83       	st	Z, r24
				iROM++;
 272:	4f 5f       	subi	r20, 0xFF	; 255
 274:	5f 4f       	sbci	r21, 0xFF	; 255
				iRAM++;
 276:	2f 5f       	subi	r18, 0xFF	; 255
 278:	3f 4f       	sbci	r19, 0xFF	; 255
				
				//wait for 200ms
				overflowCounter = 1;
 27a:	f0 92 01 02 	sts	0x0201, r15	; 0x800201 <overflowCounter+0x1>
 27e:	e0 92 00 02 	sts	0x0200, r14	; 0x800200 <overflowCounter>
				TCNT1 = timer_200_ms;
 282:	79 83       	std	Y+1, r23	; 0x01
 284:	68 83       	st	Y, r22
				sei();
 286:	78 94       	sei
				while(overflowCounter > 0){}
 288:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <overflowCounter>
 28c:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <overflowCounter+0x1>
 290:	18 16       	cp	r1, r24
 292:	19 06       	cpc	r1, r25
 294:	cc f3       	brlt	.-14     	; 0x288 <main+0xb2>
				cli();
 296:	f8 94       	cli
 298:	bb cf       	rjmp	.-138    	; 0x210 <main+0x3a>
			} else {
				
				iRAM = 0;
				
				//wait for 1000 ms
				overflowCounter = 5;
 29a:	10 93 01 02 	sts	0x0201, r17	; 0x800201 <overflowCounter+0x1>
 29e:	00 93 00 02 	sts	0x0200, r16	; 0x800200 <overflowCounter>
				TCNT1 = timer_200_ms;
 2a2:	79 83       	std	Y+1, r23	; 0x01
 2a4:	68 83       	st	Y, r22
				sei();
 2a6:	78 94       	sei
				while(overflowCounter > 0){}
 2a8:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <overflowCounter>
 2ac:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <overflowCounter+0x1>
 2b0:	18 16       	cp	r1, r24
 2b2:	19 06       	cpc	r1, r25
 2b4:	cc f3       	brlt	.-14     	; 0x2a8 <main+0xd2>
				cli();
 2b6:	f8 94       	cli
				while(overflowCounter > 0){}
				cli();
				
			} else {
				
				iRAM = 0;
 2b8:	20 e0       	ldi	r18, 0x00	; 0
 2ba:	30 e0       	ldi	r19, 0x00	; 0
 2bc:	a9 cf       	rjmp	.-174    	; 0x210 <main+0x3a>

000002be <_exit>:
 2be:	f8 94       	cli

000002c0 <__stop_program>:
 2c0:	ff cf       	rjmp	.-2      	; 0x2c0 <__stop_program>
